/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

namespace thriftnet
{
  using System;
  using System.Collections.Generic;
  using System.Diagnostics;

  using System.Linq;
  using System.Text;
  using System.IO;

  using Bench;

  using Thrift.Protocol;
  using Thrift.Transport;

  using Thrift.Net;

  [CommandModule(ShortName = "thriftnet")]
  [BenchmarkDotNet.Attributes.Jobs.SimpleJob]
  public class ThriftNetBench : SerializeTest
  {
    [CommandLineParameter]
    public string simpleValue = "abc";

    [CommandLineSwitchParameter]
    public bool full;

    private Simple simpleInput;
    private Simple simpleOutput;

    private Complex complexInput;
    private Complex complexOutput;

    TByteBuffer trans;
    TProtocol prot;

    [BenchmarkDotNet.Attributes.Setup]
    public override void Setup()
    {
      simpleInput = new Simple();
      simpleInput.Value = simpleValue;
      simpleInput.ShortValue = 16;
      simpleInput.IntValue = 17;
      simpleInput.LongValue = 18;
      simpleOutput = new Simple();

      complexInput = new Complex();
      complexOutput = new Complex();
      complexInput.SimpleValue = simpleInput;
      complexInput.ListValue = new List<Simple> { simpleInput, simpleInput };

      if (full)
      {
        complexInput.SetValue = complexInput.ListValue.ToHashSet();
        complexInput.MapValue = new Dictionary<string, Simple>
        {
          {"a", simpleInput},
          {"b", simpleInput}
        };
        complexInput.ArrayValue = complexInput.ListValue.ToArray();
      }

      trans = new TByteBuffer(1024);
      //  prot = new TBinaryProtocol(trans);
      prot = new TCompactProtocol(trans);

      trans.Clear();
      Proto<Simple>.Write(prot, simpleInput);
    }

    [BenchmarkDotNet.Attributes.Benchmark]
    public override void SimpleTest()
    {
      trans.Clear();
      Proto<Simple>.Write(prot, simpleInput);

      PrintBuf();
      trans.Seek(0, SeekOrigin.Begin);
      simpleOutput = Proto<Simple>.Read(prot, simpleOutput);

      WriteLine("{0}:{1},{2},{3},{4}",
        trans.Length,
        simpleOutput.Value,
        simpleOutput.ShortValue,
        simpleOutput.IntValue,
        simpleOutput.LongValue);
    }

    [BenchmarkDotNet.Attributes.Benchmark]
    public override void ComplexTest()
    {
      trans.Clear();
      Proto<Complex>.Write(prot, complexInput);

      PrintBuf();
      trans.Seek(0, SeekOrigin.Begin);
      complexOutput = Proto<Complex>.Read(prot, complexOutput);

      WriteLine("simple:{0},{1},{2},{3}",
        complexOutput.SimpleValue.Value,
        complexOutput.SimpleValue.ShortValue,
        complexOutput.SimpleValue.IntValue,
        complexOutput.SimpleValue.LongValue);

      if (complexOutput.ListValue != null)
      {
        for (int i = 0; i < complexOutput.ListValue.Count; i++)
        {
          WriteLine("list:{0},{1},{2},{3}",
            complexOutput.ListValue[i].Value,
            complexOutput.ListValue[i].ShortValue,
            complexOutput.ListValue[i].IntValue,
            complexOutput.ListValue[i].LongValue);
        }
      }

      if (complexOutput.SetValue != null)
      {
        foreach (Simple simple in complexOutput.SetValue)
        {
          WriteLine("set:{0},{1},{2},{3}",
            simple.Value,
            simple.ShortValue,
            simple.IntValue,
            simple.LongValue);
        }
      }

      if (complexOutput.MapValue != null)
      {
        foreach (string key in complexOutput.MapValue.Keys)
        {
          WriteLine("map[{0}]:{1},{2},{3},{4}",
            key,
            complexOutput.MapValue[key].Value,
            complexOutput.MapValue[key].ShortValue,
            complexOutput.MapValue[key].IntValue,
            complexOutput.MapValue[key].LongValue);
        }
      }

      if (complexOutput.ArrayValue != null)
      {
        for (int i = 0; i < complexOutput.ArrayValue.Length; i++)
        {
          WriteLine("array:{0},{1},{2},{3}",
            complexOutput.ArrayValue[i].Value,
            complexOutput.ArrayValue[i].ShortValue,
            complexOutput.ArrayValue[i].IntValue,
            complexOutput.ArrayValue[i].LongValue);
        }
      }
    }

    [Conditional("DEBUG")]
    private void PrintBuf()
    {
      byte[] buf = trans.GetBuffer();
      WriteLine(
        "{0}:{1}",
        trans.Length,
        string.Join(" ", Enumerable.Range(0, trans.Length).Select(i => buf[i].ToString())));
    }
  }

  [Proto]
  public class Simple
  {
    [ProtoColumn(1)]
    public string Value { get; set; }

    [ProtoColumn(2)]
    public short ShortValue { get; set; }

    [ProtoColumn(3)]
    public int IntValue { get; set; }

    [ProtoColumn(4)]
    public long LongValue { get; set; }
  }

  [Proto]
  public class Complex
  {
    [ProtoColumn(1)]
    public Simple SimpleValue { get; set; }

    [ProtoColumn(2)]
    public List<Simple> ListValue { get; set; }

    [ProtoColumn(3)]
    public HashSet<Simple> SetValue { get; set; }

    [ProtoColumn(4)]
    public Dictionary<string, Simple> MapValue { get; set; }

    [ProtoColumn(5)]
    public Simple[] ArrayValue { get; set; }
  }
}
