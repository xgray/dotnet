// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stress.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace protobuf {

  /// <summary>Holder for reflection information generated from stress.proto</summary>
  public static partial class StressReflection {

    #region Descriptor
    /// <summary>File descriptor for stress.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static StressReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxzdHJlc3MucHJvdG8SCHByb3RvYnVmIlAKBlNpbXBsZRINCgV2YWx1ZRgB",
            "IAEoCRISCgpzaG9ydFZhbHVlGAIgASgFEhAKCGludFZhbHVlGAMgASgFEhEK",
            "CWxvbmdWYWx1ZRgEIAEoAyJVCgdDb21wbGV4EiUKC3NpbXBsZVZhbHVlGAEg",
            "ASgLMhAucHJvdG9idWYuU2ltcGxlEiMKCWxpc3RWYWx1ZRgCIAMoCzIQLnBy",
            "b3RvYnVmLlNpbXBsZUILqgIIcHJvdG9idWZiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::protobuf.Simple), global::protobuf.Simple.Parser, new[]{ "Value", "ShortValue", "IntValue", "LongValue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::protobuf.Complex), global::protobuf.Complex.Parser, new[]{ "SimpleValue", "ListValue" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Simple : pb::IMessage<Simple> {
    private static readonly pb::MessageParser<Simple> _parser = new pb::MessageParser<Simple>(() => new Simple());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Simple> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::protobuf.StressReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Simple() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Simple(Simple other) : this() {
      value_ = other.value_;
      shortValue_ = other.shortValue_;
      intValue_ = other.intValue_;
      longValue_ = other.longValue_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Simple Clone() {
      return new Simple(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "shortValue" field.</summary>
    public const int ShortValueFieldNumber = 2;
    private int shortValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShortValue {
      get { return shortValue_; }
      set {
        shortValue_ = value;
      }
    }

    /// <summary>Field number for the "intValue" field.</summary>
    public const int IntValueFieldNumber = 3;
    private int intValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IntValue {
      get { return intValue_; }
      set {
        intValue_ = value;
      }
    }

    /// <summary>Field number for the "longValue" field.</summary>
    public const int LongValueFieldNumber = 4;
    private long longValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LongValue {
      get { return longValue_; }
      set {
        longValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Simple);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Simple other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      if (ShortValue != other.ShortValue) return false;
      if (IntValue != other.IntValue) return false;
      if (LongValue != other.LongValue) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (ShortValue != 0) hash ^= ShortValue.GetHashCode();
      if (IntValue != 0) hash ^= IntValue.GetHashCode();
      if (LongValue != 0L) hash ^= LongValue.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Value);
      }
      if (ShortValue != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ShortValue);
      }
      if (IntValue != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(IntValue);
      }
      if (LongValue != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(LongValue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (ShortValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShortValue);
      }
      if (IntValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IntValue);
      }
      if (LongValue != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LongValue);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Simple other) {
      if (other == null) {
        return;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      if (other.ShortValue != 0) {
        ShortValue = other.ShortValue;
      }
      if (other.IntValue != 0) {
        IntValue = other.IntValue;
      }
      if (other.LongValue != 0L) {
        LongValue = other.LongValue;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Value = input.ReadString();
            break;
          }
          case 16: {
            ShortValue = input.ReadInt32();
            break;
          }
          case 24: {
            IntValue = input.ReadInt32();
            break;
          }
          case 32: {
            LongValue = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Complex : pb::IMessage<Complex> {
    private static readonly pb::MessageParser<Complex> _parser = new pb::MessageParser<Complex>(() => new Complex());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Complex> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::protobuf.StressReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Complex() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Complex(Complex other) : this() {
      SimpleValue = other.simpleValue_ != null ? other.SimpleValue.Clone() : null;
      listValue_ = other.listValue_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Complex Clone() {
      return new Complex(this);
    }

    /// <summary>Field number for the "simpleValue" field.</summary>
    public const int SimpleValueFieldNumber = 1;
    private global::protobuf.Simple simpleValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::protobuf.Simple SimpleValue {
      get { return simpleValue_; }
      set {
        simpleValue_ = value;
      }
    }

    /// <summary>Field number for the "listValue" field.</summary>
    public const int ListValueFieldNumber = 2;
    private static readonly pb::FieldCodec<global::protobuf.Simple> _repeated_listValue_codec
        = pb::FieldCodec.ForMessage(18, global::protobuf.Simple.Parser);
    private readonly pbc::RepeatedField<global::protobuf.Simple> listValue_ = new pbc::RepeatedField<global::protobuf.Simple>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::protobuf.Simple> ListValue {
      get { return listValue_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Complex);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Complex other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SimpleValue, other.SimpleValue)) return false;
      if(!listValue_.Equals(other.listValue_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (simpleValue_ != null) hash ^= SimpleValue.GetHashCode();
      hash ^= listValue_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (simpleValue_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SimpleValue);
      }
      listValue_.WriteTo(output, _repeated_listValue_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (simpleValue_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SimpleValue);
      }
      size += listValue_.CalculateSize(_repeated_listValue_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Complex other) {
      if (other == null) {
        return;
      }
      if (other.simpleValue_ != null) {
        if (simpleValue_ == null) {
          simpleValue_ = new global::protobuf.Simple();
        }
        SimpleValue.MergeFrom(other.SimpleValue);
      }
      listValue_.Add(other.listValue_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (simpleValue_ == null) {
              simpleValue_ = new global::protobuf.Simple();
            }
            input.ReadMessage(simpleValue_);
            break;
          }
          case 18: {
            listValue_.AddEntriesFrom(input, _repeated_listValue_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
