/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace thrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class VectorTest : TBase
  {
    private List<RecList> _lister;

    public List<RecList> Lister
    {
      get
      {
        return _lister;
      }
      set
      {
        __isset.lister = true;
        this._lister = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool lister;
    }

    public VectorTest() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Lister = new List<RecList>();
                  TList _list84 = iprot.ReadListBegin();
                  for( int _i85 = 0; _i85 < _list84.Count; ++_i85)
                  {
                    RecList _elem86;
                    _elem86 = new RecList();
                    _elem86.Read(iprot);
                    Lister.Add(_elem86);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("VectorTest");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Lister != null && __isset.lister) {
          field.Name = "lister";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Lister.Count));
            foreach (RecList _iter87 in Lister)
            {
              _iter87.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("VectorTest(");
      bool __first = true;
      if (Lister != null && __isset.lister) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Lister: ");
        __sb.Append(Lister);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
