/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace thrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class OneOfEach : TBase
  {
    private bool _boolean_field;
    private sbyte _a_bite;
    private short _integer16;
    private int _integer32;
    private long _integer64;
    private double _double_precision;
    private string _some_characters;
    private byte[] _base64;
    private List<sbyte> _byte_list;
    private List<short> _i16_list;
    private List<long> _i64_list;

    public bool Boolean_field
    {
      get
      {
        return _boolean_field;
      }
      set
      {
        __isset.boolean_field = true;
        this._boolean_field = value;
      }
    }

    public sbyte A_bite
    {
      get
      {
        return _a_bite;
      }
      set
      {
        __isset.a_bite = true;
        this._a_bite = value;
      }
    }

    public short Integer16
    {
      get
      {
        return _integer16;
      }
      set
      {
        __isset.integer16 = true;
        this._integer16 = value;
      }
    }

    public int Integer32
    {
      get
      {
        return _integer32;
      }
      set
      {
        __isset.integer32 = true;
        this._integer32 = value;
      }
    }

    public long Integer64
    {
      get
      {
        return _integer64;
      }
      set
      {
        __isset.integer64 = true;
        this._integer64 = value;
      }
    }

    public double Double_precision
    {
      get
      {
        return _double_precision;
      }
      set
      {
        __isset.double_precision = true;
        this._double_precision = value;
      }
    }

    public string Some_characters
    {
      get
      {
        return _some_characters;
      }
      set
      {
        __isset.some_characters = true;
        this._some_characters = value;
      }
    }

    public byte[] Base64
    {
      get
      {
        return _base64;
      }
      set
      {
        __isset.base64 = true;
        this._base64 = value;
      }
    }

    public List<sbyte> Byte_list
    {
      get
      {
        return _byte_list;
      }
      set
      {
        __isset.byte_list = true;
        this._byte_list = value;
      }
    }

    public List<short> I16_list
    {
      get
      {
        return _i16_list;
      }
      set
      {
        __isset.i16_list = true;
        this._i16_list = value;
      }
    }

    public List<long> I64_list
    {
      get
      {
        return _i64_list;
      }
      set
      {
        __isset.i64_list = true;
        this._i64_list = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool boolean_field;
      public bool a_bite;
      public bool integer16;
      public bool integer32;
      public bool integer64;
      public bool double_precision;
      public bool some_characters;
      public bool base64;
      public bool byte_list;
      public bool i16_list;
      public bool i64_list;
    }

    public OneOfEach() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Bool) {
                Boolean_field = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Byte) {
                A_bite = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I16) {
                Integer16 = iprot.ReadI16();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                Integer32 = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I64) {
                Integer64 = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Double) {
                Double_precision = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.String) {
                Some_characters = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.String) {
                Base64 = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.List) {
                {
                  Byte_list = new List<sbyte>();
                  TList _list0 = iprot.ReadListBegin();
                  for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                  {
                    sbyte _elem2;
                    _elem2 = iprot.ReadByte();
                    Byte_list.Add(_elem2);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.List) {
                {
                  I16_list = new List<short>();
                  TList _list3 = iprot.ReadListBegin();
                  for( int _i4 = 0; _i4 < _list3.Count; ++_i4)
                  {
                    short _elem5;
                    _elem5 = iprot.ReadI16();
                    I16_list.Add(_elem5);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.List) {
                {
                  I64_list = new List<long>();
                  TList _list6 = iprot.ReadListBegin();
                  for( int _i7 = 0; _i7 < _list6.Count; ++_i7)
                  {
                    long _elem8;
                    _elem8 = iprot.ReadI64();
                    I64_list.Add(_elem8);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("OneOfEach");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.boolean_field) {
          field.Name = "boolean_field";
          field.Type = TType.Bool;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Boolean_field);
          oprot.WriteFieldEnd();
        }
        if (__isset.a_bite) {
          field.Name = "a_bite";
          field.Type = TType.Byte;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(A_bite);
          oprot.WriteFieldEnd();
        }
        if (__isset.integer16) {
          field.Name = "integer16";
          field.Type = TType.I16;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI16(Integer16);
          oprot.WriteFieldEnd();
        }
        if (__isset.integer32) {
          field.Name = "integer32";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Integer32);
          oprot.WriteFieldEnd();
        }
        if (__isset.integer64) {
          field.Name = "integer64";
          field.Type = TType.I64;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Integer64);
          oprot.WriteFieldEnd();
        }
        if (__isset.double_precision) {
          field.Name = "double_precision";
          field.Type = TType.Double;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Double_precision);
          oprot.WriteFieldEnd();
        }
        if (Some_characters != null && __isset.some_characters) {
          field.Name = "some_characters";
          field.Type = TType.String;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Some_characters);
          oprot.WriteFieldEnd();
        }
        if (Base64 != null && __isset.base64) {
          field.Name = "base64";
          field.Type = TType.String;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Base64);
          oprot.WriteFieldEnd();
        }
        if (Byte_list != null && __isset.byte_list) {
          field.Name = "byte_list";
          field.Type = TType.List;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Byte, Byte_list.Count));
            foreach (sbyte _iter9 in Byte_list)
            {
              oprot.WriteByte(_iter9);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (I16_list != null && __isset.i16_list) {
          field.Name = "i16_list";
          field.Type = TType.List;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I16, I16_list.Count));
            foreach (short _iter10 in I16_list)
            {
              oprot.WriteI16(_iter10);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (I64_list != null && __isset.i64_list) {
          field.Name = "i64_list";
          field.Type = TType.List;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I64, I64_list.Count));
            foreach (long _iter11 in I64_list)
            {
              oprot.WriteI64(_iter11);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("OneOfEach(");
      bool __first = true;
      if (__isset.boolean_field) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Boolean_field: ");
        __sb.Append(Boolean_field);
      }
      if (__isset.a_bite) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("A_bite: ");
        __sb.Append(A_bite);
      }
      if (__isset.integer16) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Integer16: ");
        __sb.Append(Integer16);
      }
      if (__isset.integer32) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Integer32: ");
        __sb.Append(Integer32);
      }
      if (__isset.integer64) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Integer64: ");
        __sb.Append(Integer64);
      }
      if (__isset.double_precision) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Double_precision: ");
        __sb.Append(Double_precision);
      }
      if (Some_characters != null && __isset.some_characters) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Some_characters: ");
        __sb.Append(Some_characters);
      }
      if (Base64 != null && __isset.base64) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Base64: ");
        __sb.Append(Base64);
      }
      if (Byte_list != null && __isset.byte_list) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Byte_list: ");
        __sb.Append(Byte_list);
      }
      if (I16_list != null && __isset.i16_list) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("I16_list: ");
        __sb.Append(I16_list);
      }
      if (I64_list != null && __isset.i64_list) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("I64_list: ");
        __sb.Append(I64_list);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
