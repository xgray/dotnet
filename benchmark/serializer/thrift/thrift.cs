/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

namespace thrift
{
  using System;
  using System.Collections.Generic;
  using System.Diagnostics;
  using System.Linq;
  using System.Text;
  using System.IO;

  using Bench;
  using Thrift;
  using Thrift.Collections;

  using Thrift.Protocol;
  using Thrift.Transport;

  [CommandModule(ShortName = "thrift")]
  [BenchmarkDotNet.Attributes.SimpleJob]
  public class ThriftBench : SerializeTest
  {

    [CommandLineParameter]
    public string simpleValue = "abc";

    [CommandLineSwitchParameter]
    public bool full;

    private Simple simpleInput;
    private Simple simpleOutput;

    private Complex complexInput;
    private Complex complexOutput;

    TByteBuffer trans;
    TProtocol prot;

    [BenchmarkDotNet.Attributes.GlobalSetup]
    public override void Setup()
    {
      simpleInput = new Simple();
      simpleInput.Value = simpleValue;
      simpleInput.ShortValue = 16;
      simpleInput.IntValue = 17;
      simpleInput.LongValue = 18;
      simpleOutput = new Simple();

      complexInput = new Complex();
      complexOutput = new Complex();
      complexInput.SimpleValue = simpleInput;
      complexInput.ListValue = new List<Simple> { simpleInput, simpleInput };

      if (full)
      {
        complexInput.SetValue = new THashSet<Simple>();
        complexInput.SetValue.Add(simpleInput);
        complexInput.SetValue.Add(simpleInput);

        complexInput.MapValue = new Dictionary<string, Simple>
        {
          {"a", simpleInput},
          {"b", simpleInput}
        };
      }

      trans = new TByteBuffer(1024);
      //  prot = new TBinaryProtocol(trans);
      prot = new TCompactProtocol(trans);

      trans.Clear();
      simpleInput.Write(prot);
    }

    [BenchmarkDotNet.Attributes.Benchmark]
    public override void SimpleTest()
    {
      trans.Clear();
      simpleInput.Write(prot);

      PrintBuf();
      trans.Seek(0, SeekOrigin.Begin);
      simpleOutput.Read(prot);

      WriteLine("{0}:{1},{2},{3},{4}",
        trans.Length,
        simpleOutput.Value,
        simpleOutput.ShortValue,
        simpleOutput.IntValue,
        simpleOutput.LongValue);
    }

    [BenchmarkDotNet.Attributes.Benchmark]
    public override void ComplexTest()
    {
      trans.Clear();
      complexInput.Write(prot);

      PrintBuf();
      trans.Seek(0, SeekOrigin.Begin);
      complexOutput.Read(prot);

      WriteLine("simple:{0},{1},{2},{3}",
        complexOutput.SimpleValue.Value,
        complexOutput.SimpleValue.ShortValue,
        complexOutput.SimpleValue.IntValue,
        complexOutput.SimpleValue.LongValue);

      if (complexOutput.ListValue != null)
      {
        for (int i = 0; i < complexOutput.ListValue.Count; i++)
        {
          WriteLine("list:{0},{1},{2},{3}",
            complexOutput.ListValue[i].Value,
            complexOutput.ListValue[i].ShortValue,
            complexOutput.ListValue[i].IntValue,
            complexOutput.ListValue[i].LongValue);
        }
      }

      if (complexOutput.SetValue != null)
      {
        foreach (Simple simple in complexOutput.SetValue)
        {
          WriteLine("set:{0},{1},{2},{3}",
            simple.Value,
            simple.ShortValue,
            simple.IntValue,
            simple.LongValue);
        }
      }

      if (complexOutput.MapValue != null)
      {
        foreach (string key in complexOutput.MapValue.Keys)
        {
          WriteLine("map[{0}]:{1},{2},{3},{4}",
            key,
            complexOutput.MapValue[key].Value,
            complexOutput.MapValue[key].ShortValue,
            complexOutput.MapValue[key].IntValue,
            complexOutput.MapValue[key].LongValue);
        }
      }
    }

    [Conditional("DEBUG")]
    private void PrintBuf()
    {
      byte[] buf = trans.GetBuffer();
      WriteLine(
        "{0}:{1}",
        trans.Length,
        string.Join(" ", Enumerable.Range(0, trans.Length).Select(i => buf[i].ToString())));
    }
  }
}
